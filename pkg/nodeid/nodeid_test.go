// Package nodeid contains tests for the nodeid package functionalities.
package nodeid

import (
	"testing"

	"github.com/google/uuid"
)

// TestNewNodeID tests the NewNodeID function.
// It ensures that the function returns a valid NodeID instance
// and that the identifier is a valid UUID.
func TestNewNodeID(t *testing.T) {
	node := NewNodeID()
	if node == nil {
		t.Fatal("NewNodeID returned nil")
	}

	if node.identifier == (uuid.UUID{}) {
		t.Fatal("NewNodeID did not generate a valid UUID")
	}
	t.Logf("The generated UUID identifier is: %s", node.identifier.String())
}

// TestNodeIDString tests the String method of the NodeID type.
// It verifies that the method returns the correct string representation of the UUID.
func TestNodeIDString(t *testing.T) {
	node := NewNodeID()
	if node.String() != node.identifier.String() {
		t.Fatalf("Expected String() to return %s, but got %s", node.identifier.String(), node.String())
	}
	t.Logf("The generated UUID identifier is: %s", node.identifier.String())
}

// TestNodeIDUniqueness tests the uniqueness of the UUIDs generated by NewNodeID.
// It generates a large number of NodeID instances and checks that there are no duplicates.
func TestNodeIDUniqueness(t *testing.T) {
	iterations := 100000
	ids := make(map[string]bool)

	for i := 0; i < iterations; i++ {
		node := NewNodeID()
		if _, exists := ids[node.String()]; exists {
			t.Fatalf("Duplicate UUID generated: %s", node.String())
		}
		ids[node.String()] = true
	}
	t.Logf("Generated %d unique UUIDs", len(ids))
}
