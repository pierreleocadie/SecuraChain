// Package aeskey contains tests for the aeskey package functionalities.
package aeskey_test

import (
	"testing"

	"github.com/pierreleocadie/SecuraChain/pkg/aeskey"
)

func TestNewKey(t *testing.T) {
	t.Parallel()

	aKey := aeskey.NewKey()
	if aKey == nil {
		t.Fatal("Key is null")
	}

	t.Logf("The generated key is %s", aKey.String())
}

// TestNewKeyString tests the String method of the AesKey type.
// It verifies that the method returns the correct string representation of the AesKey.
func TestNewKeyString(t *testing.T) {
	t.Parallel()

	aKey := aeskey.NewKey()
	keyBytes := aKey.GetKey()

	if len(keyBytes) != aeskey.KeySize {
		t.Fatalf("Expected the length of the key to be %d, but got %d", aeskey.KeySize, len(keyBytes))
	}

	t.Logf("The generated key is: %v", aKey)
}

// TestNodeIDUniqueness tests the uniqueness of the AesKey generated by NewKey.
// It generates a large number of AesKey instances and checks that there are no duplicates.
func TestAesKeyUniqueness(t *testing.T) {
	t.Parallel()

	iterations := 100000
	ids := make(map[string]bool)

	for i := 0; i < iterations; i++ {
		key := aeskey.NewKey()
		if _, exists := ids[key.String()]; exists {
			t.Fatalf("Duplicate AesKey generated: %s", key.String())
		}

		ids[key.String()] = true
	}

	t.Logf("Generated %d unique keys", len(ids))
}

// TestFileEncryptionDecryption is a test function to check the functionality of file encryption and decryption.
func TestFileEncryptionDecryption(t *testing.T) {
	t.Parallel()

	inputFilePath := "./test.jpg"
	encryptedFilePath := "./encryptedfile.jpg"
	decryptedFilePath := "./decryptedfile.jpg"

	key := aeskey.NewKey()

	if err := aeskey.EncryptFile(inputFilePath, encryptedFilePath, []byte(key.String())); err != nil {
		t.Fatal("Failed to encrypt file")
	}

	if err := aeskey.DecryptFile(encryptedFilePath, decryptedFilePath, []byte(key.String())); err != nil {
		t.Fatal("Failed to decrypt file")
	}
}
