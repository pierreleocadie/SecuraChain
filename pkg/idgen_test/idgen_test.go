// Package nodeid contains tests for the nodeid package functionalities.
package idgen_test

import (
	"testing"

	"github.com/google/uuid"
	"github.com/pierreleocadie/SecuraChain/pkg/idgen"
)

// TestNewIdentifier tests the NewIdentifier function.
// It ensures that the function returns a valid Identifier instance
// and that the identifier is a valid UUID.
func TestNewIdentifier(t *testing.T) {
	t.Parallel()

	node := idgen.NewIdentifier()

	if node == nil {
		t.Fatal("NewIdentifier returned nil")
	}

	_, err := uuid.Parse(node.String())
	if err != nil {
		t.Fatalf("NewIdentifier did not generate a valid UUID: %v", err)
	}

	t.Logf("The generated UUID identifier is: %s", node.String())
}

// TestIdentifierString tests the String method of the Identifier type.
// It verifies that the method returns the correct string representation of the UUID.
func TestIdentifierString(t *testing.T) {
	t.Parallel()

	node := idgen.NewIdentifier()
	_, err := uuid.Parse(node.String())
	if err != nil {
		t.Fatalf("String() did not return a valid UUID: %v", err)
	}

	t.Logf("The generated UUID identifier is: %s", node.String())
}

// TestIdentifierUniqueness tests the uniqueness of the UUIDs generated by NewIdentifier.
// It generates a large number of Identifier instances and checks that there are no duplicates.
func TestIdentifierUniqueness(t *testing.T) {
	t.Parallel()

	iterations := 100000
	ids := make(map[string]bool)

	for i := 0; i < iterations; i++ {
		node := idgen.NewIdentifier()
		if _, exists := ids[node.String()]; exists {
			t.Fatalf("Duplicate UUID generated: %s", node.String())
		}

		ids[node.String()] = true
	}

	t.Logf("Generated %d unique UUIDs", len(ids))
}
